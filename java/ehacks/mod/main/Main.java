/*
 * Decompiled with CFR 0_128.
 * 
 * Could not load the following classes:
 *  cpw.mods.fml.common.FMLCommonHandler
 *  cpw.mods.fml.common.Mod
 *  cpw.mods.fml.common.Mod$EventHandler
 *  cpw.mods.fml.common.Mod$Instance
 *  cpw.mods.fml.common.ModMetadata
 *  cpw.mods.fml.common.event.FMLInitializationEvent
 *  cpw.mods.fml.common.event.FMLPostInitializationEvent
 *  cpw.mods.fml.common.event.FMLPreInitializationEvent
 *  cpw.mods.fml.common.eventhandler.EventBus
 *  cpw.mods.fml.relauncher.ReflectionHelper
 *  cpw.mods.fml.relauncher.Side
 *  net.minecraft.client.Minecraft
 *  net.minecraft.client.gui.FontRenderer
 *  net.minecraft.client.renderer.texture.TextureManager
 *  net.minecraft.client.resources.IResourceManager
 *  net.minecraft.client.resources.SimpleReloadableResourceManager
 *  net.minecraft.client.settings.GameSettings
 *  net.minecraft.util.ResourceLocation
 *  net.minecraftforge.common.MinecraftForge
 *  org.lwjgl.opengl.GL11
 */
package ehacks.mod.main;

import cpw.mods.fml.common.FMLCommonHandler;
import cpw.mods.fml.common.Loader;
import cpw.mods.fml.common.Mod;
import cpw.mods.fml.common.ModMetadata;
import cpw.mods.fml.common.event.FMLInitializationEvent;
import cpw.mods.fml.common.event.FMLPostInitializationEvent;
import cpw.mods.fml.common.event.FMLPreInitializationEvent;
import cpw.mods.fml.common.eventhandler.EventBus;
import cpw.mods.fml.relauncher.ReflectionHelper;
import cpw.mods.fml.relauncher.Side;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.FontRenderer;
import net.minecraft.client.renderer.texture.TextureManager;
import net.minecraft.client.resources.IResourceManager;
import net.minecraft.client.resources.SimpleReloadableResourceManager;
import net.minecraft.client.settings.GameSettings;
import net.minecraft.util.ResourceLocation;
import net.minecraftforge.common.MinecraftForge;
import org.lwjgl.opengl.GL11;
import ehacks.api.module.APICEMod;
import ehacks.mod.commands.APICommandManager;
import ehacks.mod.commands.CommandManager;
import ehacks.mod.external.config.forge.GeneralConfiguration;
import ehacks.mod.external.config.management.ConfigurationManager;
import ehacks.mod.gui.xraysettings.XRayBlock;
import ehacks.mod.logger.ModLogger;
import ehacks.mod.modulesystem.classes.XRay;
import ehacks.mod.modulesystem.handler.ModuleManagement;
import ehacks.mod.util.FontRendererUtils;
import ehacks.mod.util.Mappings;
import ehacks.mod.util.TimerUtils;
import ehacks.mod.wrapper.Events;
import ehacks.mod.wrapper.Wrapper;
import java.lang.reflect.Field;
import net.minecraft.command.CommandBase;
import net.minecraft.command.ICommand;
import net.minecraft.command.ICommandSender;
import net.minecraftforge.client.ClientCommandHandler;

@Mod(modid="EHacks", name="EHacks", version="1.0")
public class Main {
    @Mod.Instance(value="EHacks")
    public static Main INSTANCE;
    public ModLogger logger = new ModLogger("EHacks");
    public static final String version = "1.0";

    /*@Mod.EventHandler
    public void preInit(FMLPreInitializationEvent event) {
        this.logger.info("Adding metadata information...");
        ModMetadata mMetadata = event.getModMetadata();
        mMetadata.url = "vk.com/radioegor146";
        mMetadata.description = "Cheat with a plurality of different functions!\n\nVK -> vk.com/h2_eng; vk.com/radioegor146";
        mMetadata.authorList = Arrays.asList("radioegor146", "Qmaks", "Kodehawa", "ReesZRB");
        mMetadata.autogenerated = false;
        this.logger.info("Loading...");
        this.logger.info("EHacks 1.0 [Made by Qmaks and Radioegor146] loading in minecraft version 1.7.10 and Minecraft Forge " + MinecraftForge.getBrandingVersion());
        //ClientCommandHandler.instance.registerCommand(new GiveCommandHandler());
    }*/
    
    public class GiveCommandHandler extends CommandBase {

        @Override
        public String getCommandName() {
            return "igive";
        }

        @Override
        public String getCommandUsage(ICommandSender p_71518_1_) {
            return "ItemCreator command";
        }

        @Override
        public List getCommandAliases() {
            return new ArrayList();
        }

        @Override
        public void processCommand(ICommandSender p_71515_1_, String[] p_71515_2_) {
            if (Events.itemGiveEnabled && p_71515_2_.length > 0 && Events.itemToGive == null)
            {
                if (p_71515_2_.length > 1 && "e1".equals(p_71515_2_[1]))
                    Events.enchant = 1;
                else if (p_71515_2_.length > 1 && "e2".equals(p_71515_2_[1]))
                    Events.enchant = 2;
                else
                    Events.enchant = 0;
                Events.itemToGive = p_71515_2_[0];
            }
        }

        @Override
        public boolean canCommandSenderUseCommand(ICommandSender p_71519_1_) {
            return true;
        }

        @Override
        public List addTabCompletionOptions(ICommandSender p_71516_1_, String[] p_71516_2_) {
            return new ArrayList();
        }

        @Override
        public boolean isUsernameIndex(String[] p_82358_1_, int p_82358_2_) {
            return false;
        }

        @Override
        public int compareTo(Object o) {
            return 0;
        }
    }
    
    @Mod.EventHandler
    public void init(FMLInitializationEvent event) {
        try
        {
            INSTANCE = this;
            this.logger.info("Loading Modules...");
            ModuleManagement.instance();
            this.logger.info(APICEMod.INSTANCE.mods.size() + " Modules loaded succefully!");
            if (Loader.instance().activeModContainer() == null)
            {
                Field controller = Class.forName("cpw.mods.fml.common.Loader").getField("modController");
                controller.setAccessible(true);
                Object loadController = controller.get(Loader.instance());
                Field container = Class.forName("cpw.mods.fml.common.LoadController").getField("activeContainer");
                container.setAccessible(true);
                container.set(loadController, Loader.instance().getMinecraftModContainer());
            }
            FMLCommonHandler.instance().bus().register((Object)new Events());
            MinecraftForge.EVENT_BUS.register((Object)new Events());
            Wrapper.INSTANCE.mc().fontRenderer = new FontRendererUtils(Wrapper.INSTANCE.mc().gameSettings, new ResourceLocation("textures/font/ascii.png"), Wrapper.INSTANCE.mc().renderEngine, false);
            if (Wrapper.INSTANCE.mcSettings().language != null) {
                Wrapper.INSTANCE.fontRenderer().setUnicodeFlag(Wrapper.INSTANCE.mc().func_152349_b());
                Wrapper.INSTANCE.fontRenderer().setBidiFlag(Wrapper.INSTANCE.mcSettings().forceUnicodeFont);
            }
            try {
                for (Method m : SimpleReloadableResourceManager.class.getDeclaredMethods()) {
                    if (!m.getName().equals(Mappings.registerReloadListener)) continue;
                    m.invoke((Object)Wrapper.INSTANCE.mc().getResourceManager(), new Object[]{Wrapper.INSTANCE.mc().fontRenderer});
                }
            }
            catch (Exception ex) {
                ex.printStackTrace();
            }
            ReflectionHelper.setPrivateValue(Minecraft.class, Wrapper.INSTANCE.mc(), (Object)((Object)new TimerUtils(20.0f)), (String[])new String[]{Mappings.timer});
            this.logger.info("Loading Configuration...");
            GeneralConfiguration.instance();
            ConfigurationManager.instance();
            this.logger.info("Configuration Loaded.");
            this.logger.info("Loading commands...");
            CommandManager.instance();
            APICommandManager.addCommands();
            FMLCommonHandler.instance().bus().register((Object)this);
            MinecraftForge.EVENT_BUS.register((Object)this);
            XRayBlock.init();
            XRay.displayListid = GL11.glGenLists((int)5) + 3;
            ClientCommandHandler.instance.registerCommand(new GiveCommandHandler());
            this.logger.info("All things loaded succefully.");
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
    }
    
    public Main(int sig) 
    {
        if (sig == 1337)
        {
            this.logger.info("Loading as cheat");
            init(null);
        }
    }
    
    public Main()
    {
        this.logger.info("Loading as mod");
    }
}

