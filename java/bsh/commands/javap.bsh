/**
	Print the public fields and methods of the specified class (output similar 
	to the JDK javap command).
	<p/>
	If the argument is a string it is considered to be a class name.  If the
	argument is an object, the class of the object is used.  If the arg is a
	class, the class is used.  If the argument is a class identifier, the class
	identified by the class identifier will be used. e.g.  If the argument is
	the empty string an error will be printed.
	<p/>
	<pre>
	// equivalent
	javap( java.util.Date ); // class identifier
	javap( java.util.Date.class ); // class
	javap( "java.util.Date" ); // String name of class
	javap( new java.util.Date() ); // instance of class
	</pre>

	@method void javap( String | Object | Class | ClassIdentifier )
*/

bsh.help.javap= "usage: javap( value )";

import bsh.ClassIdentifier;
import java.lang.reflect.Modifier;

javap( Object o ) 
{
	Class clas;
	if ( o instanceof ClassIdentifier )
		clas = this.caller.namespace.identifierToClass(o);
	else if ( o instanceof String )
	{
		if ( o.length() < 1 ) {
			error("javap: Empty class name.");
			return;
		}
		clas = this.caller.namespace.getClass((String)o);
	} else if ( o instanceof Class )
		clas = o;
	else 
		clas = o.getClass();
	

	if (this.interpreter.studio == null) {

		this.dmethods=clas.getDeclaredMethods();
		//print("------------- Methods ----------------");
		for(int i=0; i<dmethods.length; i++) {
			this.m = dmethods[i];
			if ( Modifier.isPublic( m.getModifiers() ) )
				buf.append( m ); buf.append('\n');
		}

		//print("------------- Fields ----------------");
		this.fields=clas.getDeclaredFields();
		for(int i=0; i<fields.length; i++) {
			this.f = fields[i];
			if ( Modifier.isPublic( f.getModifiers() ) )
				buf.append( f ); buf.append('\n');
		}
	} else {
		// see if any javadoc is available
		name = beast.util.AddOnManager.getPackageUserDir() + "/BEASTShell/doc/javadoc/" +
			clas.getName().replaceAll("\\.","/") + ".html";
		print("Checking " + name);
		if (new File(name).exists()) {
			this.interpreter.studio.helpPane.setURL(new URL("file://" + name));
			return;
		}

		buf = new StringBuffer();
		buf.append("<html><head><title>" + o + "</title><link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\"></head><body>\n");
		buf.append("<h1>Class "+clas+" extends " +clas.getSuperclass() + "</h1>\n");

		this.dmethods=clas.getDeclaredMethods();
		buf.append("<h2>------------- Methods ----------------</h2>");
		for(int i=0; i<dmethods.length; i++) {
			this.m = dmethods[i];
			if ( Modifier.isPublic( m.getModifiers() ) ) {
				buf.append( m ); buf.append("<br>");
			}
		}

		buf.append("<h2>------------- Fields ----------------</h2>");
		this.fields=clas.getDeclaredFields();
		for(int i=0; i<fields.length; i++) {
			this.f = fields[i];
			if ( Modifier.isPublic( f.getModifiers() ) ) {
				buf.append( f ); buf.append("<br>");
			}
		}

		buf.append("</body></html>");
		this.interpreter.studio.helpPane.setText(buf.toString());
	}
}

